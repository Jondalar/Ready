//
//  video.m
//  Atari800
//
//  Created by Dieter Baron on 10.07.20.
//  Copyright Â© 2020 Spiderlab. All rights reserved.
//

#import <Foundation/Foundation.h>

#include "screen.h"
#include "render.h"
#include "Atari800Thread.h"

static render_t *renderer;

// TODO: really need all 256 entries? I think only 128.
static uint32_t palette[] = {
    0x323132ff,
    0x3f3e3fff,
    0x4d4c4dff,
    0x5b5b5bff,
    0x6a696aff,
    0x797879ff,
    0x888788ff,
    0x979797ff,
    0xa1a0a1ff,
    0xafafafff,
    0xbebebeff,
    0xcecdceff,
    0xdbdbdbff,
    0xebeaebff,
    0xfafafaff,
    0xffffffff,
    0x612e00ff,
    0x6c3b00ff,
    0x7a4a00ff,
    0x885800ff,
    0x94670cff,
    0xa5761bff,
    0xb2842aff,
    0xc1943aff,
    0xca9d43ff,
    0xdaad53ff,
    0xe8bb62ff,
    0xf8cb72ff,
    0xffd87fff,
    0xffe88fff,
    0xfff79fff,
    0xffffaeff,
    0x6c2400ff,
    0x773000ff,
    0x844003ff,
    0x924e11ff,
    0x9e5d22ff,
    0xaf6c31ff,
    0xbc7b41ff,
    0xcc8a50ff,
    0xd5935bff,
    0xe4a369ff,
    0xf2b179ff,
    0xffc289ff,
    0xffcf97ff,
    0xffdfa6ff,
    0xffedb5ff,
    0xfffdc4ff,
    0x751618ff,
    0x812324ff,
    0x8f3134ff,
    0x9d4043ff,
    0xaa4e50ff,
    0xb85e60ff,
    0xc66d6fff,
    0xd57d7fff,
    0xde8787ff,
    0xed9596ff,
    0xfca4a5ff,
    0xffb4b5ff,
    0xffc2c4ff,
    0xffd1d3ff,
    0xffe0e1ff,
    0xffeff0ff,
    0x620e71ff,
    0x6e1b7cff,
    0x7b2a8aff,
    0x8a3998ff,
    0x9647a5ff,
    0xa557b5ff,
    0xb365c3ff,
    0xc375d1ff,
    0xcd7edaff,
    0xdc8de9ff,
    0xea97f7ff,
    0xf9acffff,
    0xffbaffff,
    0xffc9ffff,
    0xffd9ffff,
    0xffe8ffff,
    0x560f87ff,
    0x611d90ff,
    0x712c9eff,
    0x7f3aacff,
    0x8d48baff,
    0x9b58c7ff,
    0xa967d5ff,
    0xb877e5ff,
    0xc280edff,
    0xd090fcff,
    0xdf9fffff,
    0xeeafffff,
    0xfcbdffff,
    0xffccffff,
    0xffdbffff,
    0xffeaffff,
    0x461695ff,
    0x5122a0ff,
    0x6032acff,
    0x6e41bbff,
    0x7c4fc8ff,
    0x8a5ed6ff,
    0x996de3ff,
    0xa87cf2ff,
    0xb185fbff,
    0xc095ffff,
    0xcfa3ffff,
    0xdfb3ffff,
    0xeec1ffff,
    0xfcd0ffff,
    0xffdfffff,
    0xffefffff,
    0x212994ff,
    0x2d359fff,
    0x3d44adff,
    0x4b53baff,
    0x5961c7ff,
    0x686fd5ff,
    0x777ee2ff,
    0x878ef2ff,
    0x9097faff,
    0x96a6ffff,
    0xaeb5ffff,
    0xbfc4ffff,
    0xcdd2ffff,
    0xdae3ffff,
    0xeaf1ffff,
    0xfafeffff,
    0x0f3584ff,
    0x1c418dff,
    0x2c509bff,
    0x3a5eaaff,
    0x486cb7ff,
    0x587bc5ff,
    0x678ad2ff,
    0x7699e2ff,
    0x80a2ebff,
    0x8fb2f9ff,
    0x9ec0ffff,
    0xadd0ffff,
    0xbdddffff,
    0xcbecffff,
    0xdbfcffff,
    0xeaffffff,
    0x043f70ff,
    0x114b79ff,
    0x215988ff,
    0x2f6896ff,
    0x3e75a4ff,
    0x4d83b2ff,
    0x5c92c1ff,
    0x6ca1d2ff,
    0x74abd9ff,
    0x83bae7ff,
    0x93c9f6ff,
    0xa2d8ffff,
    0xb1e6ffff,
    0xc0f5ffff,
    0xd0ffffff,
    0xdeffffff,
    0x005918ff,
    0x006526ff,
    0x0f7235ff,
    0x1d8144ff,
    0x2c8e50ff,
    0x3b9d60ff,
    0x4aac6fff,
    0x59bb7eff,
    0x63c487ff,
    0x72d396ff,
    0x82e2a5ff,
    0x92f1b5ff,
    0x9ffec3ff,
    0xaeffd2ff,
    0xbeffe2ff,
    0xcefff1ff,
    0x075c00ff,
    0x146800ff,
    0x227500ff,
    0x328300ff,
    0x3f910bff,
    0x4fa01bff,
    0x5eae2aff,
    0x6ebd3bff,
    0x77c644ff,
    0x87d553ff,
    0x96e363ff,
    0xa7f373ff,
    0xb3fe80ff,
    0xc3ff8fff,
    0xd3ffa0ff,
    0xe3ffb0ff,
    0x1a5600ff,
    0x286200ff,
    0x367000ff,
    0x457e00ff,
    0x538c00ff,
    0x629b07ff,
    0x70a916ff,
    0x80b926ff,
    0x89c22fff,
    0x99d13eff,
    0xa8df4dff,
    0xb7ef5cff,
    0xc5fc6bff,
    0xd5ff7bff,
    0xe3ff8bff,
    0xf3ff99ff,
    0x334b00ff,
    0x405700ff,
    0x4d6500ff,
    0x5d7300ff,
    0x6a8200ff,
    0x7a9100ff,
    0x889e0fff,
    0x98ae1fff,
    0xa1b728ff,
    0xbac638ff,
    0xbfd548ff,
    0xcee458ff,
    0xdcf266ff,
    0xebff75ff,
    0xfaff85ff,
    0xffff95ff,
    0x4b3c00ff,
    0x584900ff,
    0x655700ff,
    0x746500ff,
    0x817400ff,
    0x908307ff,
    0x9f9116ff,
    0xaea126ff,
    0xb7aa2eff,
    0xc7ba3eff,
    0xd5c74dff,
    0xe5d75dff,
    0xf2e56bff,
    0xfef47aff,
    0xffff8bff,
    0xffff9aff,
    0x602e00ff,
    0x6d3a00ff,
    0x7a4900ff,
    0x895800ff,
    0x95670aff,
    0xa4761bff,
    0xb2832aff,
    0xc2943aff,
    0xcb9d44ff,
    0xdaac53ff,
    0xe8ba62ff,
    0xf8cb73ff,
    0xffd77fff,
    0xffe791ff,
    0xfff69fff,
    0xffffafff
};

int display_init() {
    render_size_t size = { Screen_WIDTH, Screen_HEIGHT };
    [atari800Thread initBitmapWidth:size.width  height:size.height];
    if ((renderer = render_new(size, atari800Thread.imageData.mutableBytes, palette, atari800Thread.currentBorderMode)) == NULL) {
        return -1;
    }
    
    return 0;
}

void display_fini() {
    render_free(renderer);
}

void PLATFORM_DisplayScreen(void) {
    render_image_t image;
    image.data = (uint8_t *)Screen_atari + Screen_visible_y1 * Screen_WIDTH + Screen_visible_x1;
    image.row_size = Screen_WIDTH;
    image.size.width = Screen_visible_x2 - Screen_visible_x1;
    image.size.height = Screen_visible_y2 - Screen_visible_y1;
    image.screen.origin.x = 0; // TODO: border
    image.screen.origin.y = 0;
    image.screen.size.width = image.size.width;
    image.screen.size.height = image.size.height;

    const render_size_t *current_size = render(renderer, &image, atari800Thread.newBorderMode);
    [atari800Thread updateBitmapWidth:current_size->width height:current_size->height];
    atari800Thread.currentBorderMode = atari800Thread.newBorderMode;
}

